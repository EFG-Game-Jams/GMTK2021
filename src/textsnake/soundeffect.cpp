// autogenerated by MidiToText
#include "soundeffect.hpp"
#include "beepmanager.hpp"

void PlaySoundEffect(SoundEffect effect)
{
	static std::vector<std::vector<BeepManager::Note>> effects;
	if (effects.empty())
	{
		std::vector<BeepManager::Note> notes;
		// GOOD1
		notes.clear();
		notes.push_back(BeepManager::Note(261, 125));
		notes.push_back(BeepManager::Note(523, 250));
		effects.push_back(notes);
		// BAD1
		notes.clear();
		notes.push_back(BeepManager::Note(391, 125));
		notes.push_back(BeepManager::Note(261, 250));
		effects.push_back(notes);
		// NEUTRAL1
		notes.clear();
		notes.push_back(BeepManager::Note(391, 125));
		notes.push_back(BeepManager::Note(261, 125));
		notes.push_back(BeepManager::Note(523, 250));
		effects.push_back(notes);
		// TWINKLEGOOD1
		notes.clear();
		notes.push_back(BeepManager::Note(261, 187));
		notes.push_back(BeepManager::Note(329, 250));
		notes.push_back(BeepManager::Note(195, 250));
		notes.push_back(BeepManager::Note(261, 250));
		notes.push_back(BeepManager::Note(0, 312));
		notes.push_back(BeepManager::Note(329, 187));
		notes.push_back(BeepManager::Note(391, 562));
		effects.push_back(notes);
		// TWINKLEBAD1
		notes.clear();
		notes.push_back(BeepManager::Note(349, 187));
		notes.push_back(BeepManager::Note(261, 250));
		notes.push_back(BeepManager::Note(311, 250));
		notes.push_back(BeepManager::Note(391, 250));
		notes.push_back(BeepManager::Note(0, 312));
		notes.push_back(BeepManager::Note(311, 187));
		notes.push_back(BeepManager::Note(261, 562));
		effects.push_back(notes);
	}
	BeepManager::instance.Play(effects[(int)effect]);
}
